*options.txt*   For IdeaVim version @VERSION@.  Last change: 2004 June 29.
                       For IntellIJ platform version @PLATFORM_VERSION@

                  IdeaVim REFERENCE MANUAL    by Rick Maddy


Options                                                 *options*

1. Setting options                      |set-option|
2. Automatically setting options        |auto-setting|
3. Options summary                      |option-summary|

For an overview of options see help.txt |option-list|.

Vim has a number of internal variables and switches which can be set to
achieve special effects.  These options come in three forms:
        boolean         can only be on or off           *boolean* *toggle*
        number          has a numeric value
        string          has a string value

==============================================================================
1. Setting options                                      *set-option*

                                                        *:se* *:set*
:se[t]                  Show all options that differ from their default value.

:se[t] all              Show all but terminal options.

:se[t] {option}?        Show value of {option}.

:se[t] {option}         Toggle option: set, switch it on.
                        Number option: show value.
                        String option: show value.

:se[t] no{option}       Toggle option: Reset, switch it off.

:se[t] {option}!   or
:se[t] inv{option}      Toggle option: Invert value.

                                *:set-default* *:set-&* *:set-&vi* *:set-&vim*
:se[t] {option}&        Reset option to its default value.

:se[t] all&             Set all options to their
                        default value.

:se[t] {option}={value}         or
:se[t] {option}:{value}
                        Set string or number option to {value}.
                                                                *:set-args*
                        For numeric options the value can be given in decimal,
                        hex (preceded with 0x) or octal (preceded with '0')
                        (hex and octal are only available for machines which
                        have the strtol() function).
                        White space between {option} and '=' is allowed and
                        will be ignored.  White space between '=' and {value}
                        is not allowed.
                        See |option-backslash| for using white space and
                        backslashes in {value}.

:se[t] {option}+={value}                                *:set+=*
                        Add the {value} to a number option, or append the
                        {value} to a string option.  When the option is a
                        comma separated list, a comma is added, unless the
                        value was empty.
                        If the option is a list of flags, superfluous flags
                        are removed.  Otherwise there is no check for doubled
                        values.  You can avoid this by removing a value first.
                        Example: >
                                :set guioptions-=T guioptions+=T
<                       Also see |:set-args| above.

:se[t] {option}^={value}                                *:set^=*
                        Multiply the {value} to a number option, or prepend
                        the {value} to a string option.  When the option is a
                        comma separated list, a comma is added, unless the
                        value was empty.
                        Also see |:set-args| above.

:se[t] {option}-={value}                                *:set-=*
                        Subtract the {value} from a number option, or remove
                        the {value} from a string option, if it is there.
                        If the {value} is not found in a string option, there
                        is no error or warning.  When the option is a comma
                        separated list, a comma is deleted, unless the option
                        becomes empty.
                        When the option is a list of flags, {value} must be
                        exactly as they appear in the option.  Remove flags
                        one by one to avoid problems.
                        Also see |:set-args| above.

The {option} arguments to ":set" may be repeated.  For example: >
        :set ai nosi sw=3 ts=3
If you make an error in one of the arguments, an error message will be given
and the following arguments will be ignored.

The listing from ":set" looks different from Vi.  Long string options are put
at the end of the list.  The number of options is quite large.  The output of
"set all" probably does not fit on the screen, causing Vim to give the
|more-prompt|.

                                                        *option-backslash*
To include white space in a string option value it has to be preceded with a
backslash.  To include a backslash you have to use two.  Effectively this
means that the number of backslashes in an option value is halved (rounded
down).
A few examples: >
   :set tags=tags\ /usr/tags        results in "tags /usr/tags"
   :set tags=tags\\,file            results in "tags\,file"
   :set tags=tags\\\ file           results in "tags\ file"

The "|" character separates a ":set" command from a following command.  To
include the "|" in the option value, use "\|" instead.  This example sets the
'titlestring' option to "hi|there": >
   :set titlestring=hi\|there
This sets the 'titlestring' option to "hi" and 'iconstring' to "there": >
   :set titlestring=hi|set iconstring=there

For MS-DOS and WIN32 backslashes in file names are mostly not removed.  More
precise: For options that expect a file name (those where environment
variables are expanded) a backslash before a normal file name character is not
removed.  But a backslash before a special character (space, backslash, comma,
etc.) is used like explained above.
There is one special situation, when the value starts with "\\": >
   :set dir=\\machine\path          results in "\\machine\path"
   :set dir=\\\\machine\\path       results in "\\machine\path"
   :set dir=\\path\\file            results in "\\path\file" (wrong!)
For the first one the start is kept, but for the second one the backslashes
are halved.  This makes sure it works both when you expect backslashes to be
halved and when you expect the backslashes to be kept.  The third gives a
result which is probably not what you want.  Avoid it.

                                *add-option-flags* *remove-option-flags*
Some options are a list of flags.  When you want to add a flag to such an
option, without changing the existing ones, you can do it like this: >
   :set guioptions+=a
Remove a flag from an option like this: >
   :set guioptions-=a
This removes the 'a' flag from 'guioptions'.
Note that you should add or remove one flag at a time.  If 'guioptions' has
the value "ab", using "set guioptions-=ba" won't work, because the string "ba"
doesn't appear.


==============================================================================
2. Automatically setting options                        *auto-setting*

Besides changing options with the ":set" command, there is one alternative
to set options automatically for one or more files:

1. When starting Vim initializations are read from various places.  See
   |initialization|.  Most of them are performed for all editing sessions,
   and some of them depend on the directory where Vim is started.


==============================================================================
3. Options summary                                      *option-summary*

In the list below all the options are mentioned with their full name and with
an abbreviation if there is one.  Both forms may be used.

In this document when a boolean option is "set" that means that ":set option"
is entered.  When an option is "reset", ":set nooption" is used.


                                     *'digraph'* *'dg'* *'nodigraph'* *'nodg'*
'digraph' 'dg'          boolean (default off)
                        global
        Enable the entering of digraphs in Insert mode with {char1} <BS>
        {char2}.  See |digraphs|.

                                   *'gdefault'* *'gd'* *'nogdefault'* *'nogd'*
'gdefault' 'gd'         boolean (default off)
                        global
        When on, the ":substitute" flag 'g' is default on.  This means that
        all matches in a line are substituted instead of one.  When a 'g' flag
        is given to a ":substitute" command, this will toggle the substitution
        of all or one match.  See |complex-change|.

                command         'gdefault' on   'gdefault' off  ~
                :s///             subst. all      subst. one
                :s///g            subst. one      subst. all
                :s///gg           subst. all      subst. one

                                 *'hlsearch'* *'hls'* *'nohlsearch'* *'nohls'*
'hlsearch' 'hls'        boolean (default off)
                        global
                        Not in IDEA 4.0.x
        When there is a previous search pattern, highlight all its matches.
        Note that only the matching text is highlighted, any offsets
        are not applied.
        When you get bored looking at the highlighted matches, you can turn it
        off with |:nohlsearch|.  As soon as you use a search command, the
        highlighting comes back.
        When the search pattern can match an end-of-line, Vim will try to
        highlight all of the matched text.  However, this depends on where the
        search starts.  This will be the first line in the window or the first
        line below a closed fold.  A match in a previous line which is not
        drawn may not continue in an newly drawn line.

                        *'ignorecase'* *'ic'* *'noignorecase'* *'noic'*
'ignorecase' 'ic'       boolean (default off)
                        global
        Ignore case in search patterns.  Also used when searching in the tags
        file.
        Also see 'smartcase'.
        Can be overruled by using "\c" or "\C" in the pattern, see
        |/ignorecase|.

                                                *'matchpairs'* *'mps'*
'matchpairs' 'mps'      string  (default "(:),{:},[:]")
                        local to buffer
        Characters that form pairs.  The |%| command jumps from one to the
        other.  Currently only single character pairs are allowed, and they
        must be different.  The characters must be separated by a colon.  The
        pairs must be separated by a comma.  Example for including '<' and '>'
        (HTML): >
                :set mps+=<:>

<       A more exotic example, to jump between the '=' and ';' in an
        assignment, useful for languages like C and Java: >
                :au FileType c,cpp,java set mps+==:;

                                                *'more'* *'nomore'*
'more'                  boolean (default: on)
                        global
        When on, listings pause when the whole screen is filled.  You will get
        the |more-prompt|.  When this option is off there are no pauses, the
        listing continues until finished.

                                                *'scroll'* *'scr'*
'scroll' 'scr'          number  (default: half the window height)
                        local to window
        Number of lines to scroll with CTRL-U and CTRL-D commands.  Will be
        set to half the number of lines in the window when the window size
        changes.  If you give a count to the CTRL-U or CTRL-D command it will
        be used as the new value for 'scroll'.  Reset to half the window
        height with ":set scroll=0".

                                                *'selection'* *'sel'*
'selection' 'sel'       string  (default "inclusive")
                        global
        This option defines the behavior of the selection.  It is only used
        in Visual and Select mode.
        Possible values:
           value        past line     inclusive ~
           old             no           yes
           inclusive       yes          yes
           exclusive       yes          no
        "past line" means that the cursor is allowed to be positioned one
        character past the line.
        "inclusive" means that the last character of the selection is included
        in an operation.  For example, when "x" is used to delete the
        selection.

                                 *'showmode'* *'smd'* *'noshowmode'* *'nosmd'*
'showmode' 'smd'        boolean (default: on)
                        global
        If in Insert, Replace or Visual mode put a message on the last line.
        Use the 'M' flag in 'highlight' to set the type of highlighting for
        this message.

                        *'smartcase'* *'scs'* *'nosmartcase'* *'noscs'*
'smartcase' 'scs'       boolean (default off)
                        global
        Override the 'ignorecase' option if the search pattern contains upper
        case characters.  Only used when the search pattern is typed and
        'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
        ":g" and ":s".  Not used for "*", "#", "gd", tag search, etc..  After
        "*" and "#" you can make 'smartcase' used by doing a "/" command,
        recalling the search pattern from history and hitting <Enter>.

                                                *'undolevels'* *'ul'*
'undolevels' 'ul'       number  (default 1000)
                        global
        Maximum number of changes that can be undone.  Since undo information
        is kept in memory, higher numbers will cause more memory to be used
        (nevertheless, a single change can use an unlimited amount of memory).
        Set to 0 for Vi compatibility: One level of undo and "u" undoes
        itself: >
                set ul=0

                        *'visualbell'* *'vb'* *'novisualbell'* *'novb'* *beep*
'visualbell' 'vb'       boolean (default off)
                        global
        If set, no beep will occurr. If no visual bell, beeping will occurr.

                                   *'wrapscan'* *'ws'* *'nowrapscan'* *'nows'*
'wrapscan' 'ws'         boolean (default on)                    *E384* *E385*
                        global
        Searches wrap around the end of the file.

